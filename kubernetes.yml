# ----------------------------------------------------------------------------- *
# ADVERTENCIA -> Es necesario utilizar dos o más núcleos en la máquina virtual. *
# ----------------------------------------------------------------------------- *

# -- Instalación de SSH --
# yum –y install openssh-server openssh-clients
# systemctl start sshd
# systemctl enable sshd
# ----

# -- Instlación de Ansible --
# yum install epel-release
# yum install ansible
# yum -y update
# ----

# -- Generación de una clave SSH que punta al mismo ordenador --
# ssh-keygen
# Pulsa enter y introduce una frase.
# ssh-copy-id root@192.168.1.37
# vi /etc/ansible/hosts
# Añade la IP del ordenador al que quieres apuntar
# Modifica en eeste yaml el campo "hosts"
# mkdir Ansible
# ----

# -- Habilita la interfaz enp0s3 ycrear Adaptador puente --
# Ves a la configuración de la máquina virtual, subapartado “Red” y selecciona la opción “Adaptador puente”.
# vi /etc/sysconfig/network-scripts/ifcfg-enp0s3
# Modifica la opción de “ONBOOT=no” a “ONBOOT=yes” y guarda los cambios.
# service network restart
# ----

# -- Comando para instalar el playbook --
# ansible-playbook kubernetes.yml --extra-vars "ip={ip}"
# ----

# Instalación de Kubernetes
---
- name: Instalacion de Kubernetes
  hosts: servidor
  tasks:
  - name: Instalando yum-utils
    yum:
      name: yum-utils
      state: present

  - name: Instalando device-mapper-persistent-data
    yum:
      name: device-mapper-persistent-data
      state: present

  - name: Instalando lvm2
    yum:
      name: lvm2
      state: present

  - name: Instalando httpd
    yum:
      name: httpd
      state: present

  - name: Iniciando el servicio httpd
    ansible.builtin.systemd:
      name: httpd
      state: started
      enabled: yes

  - name: Añadiendo el repositorio de Docker
    shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

  - name: Instalando Docker
    yum:
      name: docker-ce
      state: present

  - name: Iniciando el servicio de Docker
    ansible.builtin.systemd:
      name: docker
      state: started
      enabled: yes

  - name: Creando carpetaa para Kubernetes
    ansible.builtin.file:
      path: /kubernetes
      state: directory

  - name: Configurandio el repositorio de Kubernetes
    shell: |
      cat <<EOF > /etc/yum.repos.d/kubernetes.repo
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled=1
      gpgcheck=1
      repo_gpgcheck=1
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      EOF
  - name: Instalando kubelet
    shell: yum -y install kubelet-1.20.0-0 --nogpgcheck

  - name: Instalando kubeadm
    shell: yum -y install kubeadm-1.20.0-0 --nogpgcheck

  - name: Instalando kubectl
    shell: yum -y install kubectl-1.20.0-0 --nogpgcheck

  - name: Iniciando el servicio kubelet y habilitandolo
    ansible.builtin.systemd:
      name: kubelet
      state: started
      enabled: yes

  - name: Configurando la red
    shell: |
      cat <<EOF > /etc/sysctl.d/k8s.conf
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      EOF

  - name: Se modifica el kernel
    shell: sysctl --system

  - name: Se configura el firewall
    shell: echo '1' > /proc/sys/net/ipv4/ip_forward

  - name: Se desactiva Selinux
    shell: setenforce 0

  - name: Se configura Selinux
    shell: sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

  - name: Se configura fstab
    shell: sed -i '/swap/d' /etc/fstab

  - name: Se desactiva swap
    shell: swapoff -a

  - name: Creando el cluster de kubernetes
    shell: kubeadm init --apiserver-advertise-address={{ ip }} --pod-network-cidr=10.244.0.0/16
    ignore_errors: yes

  - name: Se crea un directorio para el archivo de configuracion de Kubernetes
    ansible.builtin.file:
      path: ~/kube
      state: directory

  - name: Se crea la carpeta del archivo de configuración de Kubernetes
    shell: mkdir -p ~/.kube

  - name: Se copia el archivo de configuracion a la ruta anterior
    shell: cp /etc/kubernetes/admin.conf ~/.kube/config

  - name: Se aplican los cambios de red a Kubernetes
    shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

  - name: El nodo maestro ahora puede ser un nodo trabajador
    shell: kubectl taint nodes --all node-role.kubernetes.io/master-
    ignore_errors: yes

  - name: Creando el alias k=kubectl
    lineinfile:
      path: ~/.bashrc
      line: alias k='kubectl'
      insertbefore: BOF
 
  - name: Creando el alias ksys=kubectl -n kube-sys
    lineinfile:
      path: ~/.bashrc
      line: alias ksys='kubectl -n kube-system'
      insertbefore: BOF

  - name: Creando carpeta para kubernetes
    shell: mkdir -p /kubernetes

  - name: Creano carpeta para Helm
    shell: mkdir -p /Helm

  - name: Descargando Helm 3
    shell: curl -fsSL -o /Helm/get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3

  - name: Otorgando permisos al instaldor
    shell: chdir=/Helm chmod 700 get_helm.sh

  - name: Ejecutando el script
    shell: chdir=/Helm ./get_helm.sh
    
  - name: Parando docker
    shell: systemctl stop docker
    
  - name: Parando kubelete
    shell: systemctl stop kubelet
    
  - name: Purgando iptables I
    shell: iptables --flush
  
  - name: Purgando iptables II
    shell: iptables -tnat --flush
    
  - name: Iniciando kubelete
    shell: systemctl start kubelet

  - name: Iniciando docker
    shell: systemctl start docker

  - name: Esperando a que kubernetes arranque
    pause:
      seconds: 30 
